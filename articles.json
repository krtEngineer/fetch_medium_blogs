{
  "items": [
    {
      "creator": "Kushagra Raj Tiwari",
      "title": "AWS: Adding a Layer to AWS Lambda in Node.js",
      "link": "https://medium.com/@KushagraRajTiwari/aws-adding-a-layer-to-aws-lambda-in-node-js-35011bf23ea1?source=rss-da71bf5101aa------2",
      "pubDate": "Wed, 25 Sep 2024 10:31:54 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/731/1*vlXq4warXOEQxYXGd1rzOQ.png\" /></figure><p>AWS Lambda layers are a powerful way to manage and share code and dependencies across multiple Lambda functions. They allow you to package libraries, custom runtimes, and other dependencies separately from your function code. This can help reduce deployment package sizes and promote code reuse.</p><p>In this blog post, we will walk through the steps to create a Lambda layer, add it to a Lambda function, and use it in a Node.js environment.</p><h3>Prerequisites</h3><ul><li>AWS Account</li><li>AWS CLI configured</li><li>Node.js installed</li><li>Basic knowledge of AWS Lambda and Node.js</li></ul><h3>Step 1: Create a Lambda Layer</h3><p>First, let’s create a Lambda layer that includes a Node.js library. For this example, we’ll use the axios library.</p><p>Create a directory for the layer:</p><pre>mkdir lambda-layer<br>cd lambda-layer</pre><p>Initialize a Node.js project:</p><pre>npm init -y</pre><p>Install the axios library:</p><pre>npm install axios</pre><p>Create a nodejs directory and move the node_modules and package.json files into it:</p><pre>mkdir nodejs<br>mv node_modules package.json nodejs/</pre><p>Zip the nodejs directory:</p><pre>zip -r layer.zip nodejs</pre><h3>Step 2: Create a Lambda Function</h3><p>Now that we have our layer, let’s create a Lambda function and add the layer to it.</p><p>Create a new directory for the Lambda function:</p><pre>mkdir lambda-function<br>cd lambda-function</pre><p>Create an index.js file with the following content:</p><pre>const axios = require(&#39;axios&#39;);<br><br>exports.handler = async (event) =&gt; {<br>    try {<br>        const response = await axios.get(&#39;https://api.github.com/&#39;);<br>        return {<br>            statusCode: 200,<br>            body: JSON.stringify(response.data),<br>        };<br>    } catch (error) {<br>        return {<br>            statusCode: 500,<br>            body: JSON.stringify(error.message),<br>        };<br>    }<br>};</pre><p>Zip the Lambda function:</p><pre>zip -r function.zip index.js</pre><p>Create the Lambda function using the AWS CLI:</p><pre>aws lambda create-function \\<br>--function-name myLambdaFunction \\<br>--runtime nodejs14.x \\<br>--role arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_LAMBDA_EXECUTION_ROLE \\<br>--handler index.handler \\<br>--zip-file fileb://function.zip</pre><p>Replace YOUR_ACCOUNT_ID and YOUR_LAMBDA_EXECUTION_ROLE with your actual AWS account ID and Lambda execution role ARN.</p><h3>Step 3: Add the Layer to the Lambda Function</h3><p>Retrieve the Layer Version ARN:</p><p>After publishing the layer, you will get a response containing the LayerVersionArn. It will look something like this:</p><pre>{<br>  &quot;LayerVersionArn&quot;: &quot;arn:aws:lambda:us-west-2:123456789012:layer:axios-layer:1&quot;,<br>  ...<br>}</pre><p>Add the layer to your Lambda function:</p><pre>aws lambda update-function-configuration \\<br>--function-name myLambdaFunction \\<br>--layers arn:aws:lambda:us-west-2:123456789012:layer:axios-layer:1</pre><h3>Step 4: Test the Lambda Function</h3><p>You can test your Lambda function using the AWS Management Console or the AWS CLI.</p><p>Invoke the function using the AWS CLI:</p><pre>aws lambda invoke --function-name myLambdaFunction output.txt</pre><p>Check the output:</p><pre>cat output.txt</pre><p>You should see the response from the GitHub API.</p><h3>Conclusion</h3><p>This should give you a comprehensive guide on how to add a layer to AWS Lambda in Node.js. If you have any questions or run into issues, feel free to comment!</p><p>Happy coding!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=35011bf23ea1\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "AWS Lambda layers are a powerful way to manage and share code and dependencies across multiple Lambda functions. They allow you to package libraries, custom runtimes, and other dependencies separately from your function code. This can help reduce deployment package sizes and promote code reuse.\nIn this blog post, we will walk through the steps to create a Lambda layer, add it to a Lambda function, and use it in a Node.js environment.\nPrerequisites\n\nAWS Account\nAWS CLI configured\nNode.js installed\nBasic knowledge of AWS Lambda and Node.js\n\nStep 1: Create a Lambda Layer\nFirst, let’s create a Lambda layer that includes a Node.js library. For this example, we’ll use the axios library.\nCreate a directory for the layer:\nmkdir lambda-layer\ncd lambda-layer\nInitialize a Node.js project:\nnpm init -y\nInstall the axios library:\nnpm install axios\nCreate a nodejs directory and move the node_modules and package.json files into it:\nmkdir nodejs\nmv node_modules package.json nodejs/\nZip the nodejs directory:\nzip -r layer.zip nodejs\nStep 2: Create a Lambda Function\nNow that we have our layer, let’s create a Lambda function and add the layer to it.\nCreate a new directory for the Lambda function:\nmkdir lambda-function\ncd lambda-function\nCreate an index.js file with the following content:\nconst axios = require('axios');\nexports.handler = async (event) => {\n    try {\n        const response = await axios.get('https://api.github.com/');\n        return {\n            statusCode: 200,\n            body: JSON.stringify(response.data),\n        };\n    } catch (error) {\n        return {\n            statusCode: 500,\n            body: JSON.stringify(error.message),\n        };\n    }\n};\nZip the Lambda function:\nzip -r function.zip index.js\nCreate the Lambda function using the AWS CLI:\naws lambda create-function \\\n--function-name myLambdaFunction \\\n--runtime nodejs14.x \\\n--role arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_LAMBDA_EXECUTION_ROLE \\\n--handler index.handler \\\n--zip-file fileb://function.zip\nReplace YOUR_ACCOUNT_ID and YOUR_LAMBDA_EXECUTION_ROLE with your actual AWS account ID and Lambda execution role ARN.\nStep 3: Add the Layer to the Lambda Function\nRetrieve the Layer Version ARN:\nAfter publishing the layer, you will get a response containing the LayerVersionArn. It will look something like this:\n{\n  \"LayerVersionArn\": \"arn:aws:lambda:us-west-2:123456789012:layer:axios-layer:1\",\n  ...\n}\nAdd the layer to your Lambda function:\naws lambda update-function-configuration \\\n--function-name myLambdaFunction \\\n--layers arn:aws:lambda:us-west-2:123456789012:layer:axios-layer:1\nStep 4: Test the Lambda Function\nYou can test your Lambda function using the AWS Management Console or the AWS CLI.\nInvoke the function using the AWS CLI:\naws lambda invoke --function-name myLambdaFunction output.txt\nCheck the output:\ncat output.txt\nYou should see the response from the GitHub API.\nConclusion\nThis should give you a comprehensive guide on how to add a layer to AWS Lambda in Node.js. If you have any questions or run into issues, feel free to comment!\nHappy coding!",
      "dc:creator": "Kushagra Raj Tiwari",
      "guid": "https://medium.com/p/35011bf23ea1",
      "categories": [
        "nodejs",
        "lambda-function",
        "npm",
        "aws",
        "lambda-layer"
      ],
      "isoDate": "2024-09-25T10:31:54.000Z"
    },
    {
      "creator": "Kushagra Raj Tiwari",
      "title": "Binary Search 1",
      "link": "https://medium.com/@KushagraRajTiwari/binary-search-1-a57c16cadad1?source=rss-da71bf5101aa------2",
      "pubDate": "Sat, 09 Mar 2024 18:46:14 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ahdMvpGRWzQWaHux.png\" /></figure><p>Binary search divides search space into two parts based on some intermediate results during the search this reduces the time complexity of the search problem. But, the underlying assumption is that search space should be sorted.</p><p>In this article, some problems share some common concepts in their solution.</p><p>Consider a situation in which an array is <strong>sorted</strong> in ascending order. The array can have repeated values also. Here aim is to find the given <strong>target</strong> in this array.</p><p><strong>Problem 1</strong>: Finding the target in the array using binary search.</p><p><strong>Problem 2</strong>: Finding the first and last occurrences of the target in an array.</p><p><strong>Problem 3</strong>: Finding the insertion position of the target if it is not present.</p><p><strong>Solution 1:</strong> Remove the search space where the chance of finding the target is zero.</p><p><strong>Solution 2</strong>: Once the target element is found and it is possible that it can have multiple occurrences then continue searching in the left search space for the first occurrence and searching in the right search space for the last occurrence. <strong>Remember</strong> to record the latest occurrence of the target each time you find it.</p><p><strong>Solution 3: </strong>The pointer representing the left search space signifies that all numbers before the left or start pointer are smaller than the <strong>target</strong>. After traversing the whole search space with no target found the left or pointer signifies that all numbers before the last left or start pointer position are smaller than the target. The current position of the left pointer will be the insertion position for the target. If the last position of the left or start position is more than the maximum allowable index then the insertion position of the target is imaginary but a valid answer.</p><p>Below is the combined code for all the above solutions.</p><pre>class Solution {<br>    private static class BsResponse {<br>        private boolean isElementPresent;<br>        private int index;<br><br>        public BsResponse(boolean isElementPresent, int index) {<br>            this.isElementPresent = isElementPresent;<br>            this.index = index;<br>        }<br><br>        public boolean isElementPresent() {<br>            return isElementPresent;<br>        }<br><br>        public int getIndex() {<br>            return index;<br>        }<br>    }<br><br>    private static class BsRequest {<br>        enum Option {<br>            ANY_OCCURRENCE, FIRST_OCCURRENCE, LAST_OCCURRENCE,<br>        }<br><br>        private int[] arr;<br>        private int target;<br>        private int start;<br>        private int end;<br>        private Option option;<br><br>        public BsRequest(int[] arr, int target, int start, int end, Option option) {<br>            this.arr = arr;<br>            this.target = target;<br>            this.start = start;<br>            this.end = end;<br>            this.option = option;<br>        }<br><br>        public int[] getArr() {<br>            return arr;<br>        }<br><br>        public int getTarget() {<br>            return target;<br>        }<br><br>        public int getStart() {<br>            return start;<br>        }<br><br>        public int getEnd() {<br>            return end;<br>        }<br><br>        public Option getOption() {<br>            return option;<br>        }<br>    }<br><br>    private static BsResponse binarySearch(BsRequest request) {<br><br>        int[] arr = request.getArr();<br>        int target = request.getTarget();<br>        int start = request.getStart();<br>        int end = request.getEnd();<br>        BsRequest.Option option = request.getOption();<br><br>        boolean isElementPresent = false;<br>        int index = -1;<br>        while (start &lt;= end) {<br>            int mid = start + (end - start) / 2;<br>            if (arr[mid] &lt; target) {<br>                start = mid + 1;<br>            } else if (arr[mid] &gt; target) {<br>                end = mid - 1;<br>            } else {<br>                isElementPresent = true;<br>                index = mid;<br>                if (option.equals(BsRequest.Option.LAST_OCCURRENCE)) {<br>                    start = mid + 1;<br>                } else if (option.equals(BsRequest.Option.FIRST_OCCURRENCE)) {<br>                    end = mid - 1;<br>                } else if (option.equals(BsRequest.Option.ANY_OCCURRENCE)) {<br>                    break;<br>                }<br>            }<br>        }<br>        return new BsResponse(isElementPresent, isElementPresent ? index : start);<br>    }<br><br>    private static void printAnswer(boolean isElementPresent, int target, int index) {<br>        if (isElementPresent) {<br>            System.out.println(&quot;Index of last occurrence of &quot; + target + &quot; is: &quot; + index);<br>        } else {<br>            System.out.println(&quot;Insertion position of &quot; + target + &quot; is: &quot; + index);<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        int[] arr = {1, 2, 2, 2, 3, 3, 5};<br>        int x = 2;<br>        //solution<br>        int n = arr.length;<br>        BsRequest request_1 = new BsRequest(arr, x, 0, n - 1, BsRequest.Option.FIRST_OCCURRENCE);<br>        BsResponse result_1 = binarySearch(request_1);<br>        printAnswer(result_1.isElementPresent, x, result_1.index);<br><br>        BsRequest request_2 = new BsRequest(arr, x, 0, n - 1, BsRequest.Option.LAST_OCCURRENCE);<br>        BsResponse result_2 = binarySearch(request_2);<br>        printAnswer(result_2.isElementPresent, x, result_2.index);<br><br>        x = 4;<br>        BsRequest request_3 = new BsRequest(arr, x, 0, n - 1, BsRequest.Option.ANY_OCCURRENCE);<br>        BsResponse result_3 = binarySearch(request_3);<br>        printAnswer(result_3.isElementPresent, x, result_3.index);<br>    }<br>}</pre><p>Response for the above code is:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/666/1*MkDKwKH1HSMSdtenKC7-Fw.png\" /></figure><p>The following problems are related to the above solutions.</p><p><a href=\"https://leetcode.com/problems/binary-search/description/\">https://leetcode.com/problems/binary-search/description/</a></p><ul><li><a href=\"https://www.codingninjas.com/studio/problems/lower-bound_8165382?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\">Coding Ninjas Studio</a></li><li><a href=\"https://www.codingninjas.com/studio/problems/implement-upper-bound_8165383?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\">Coding Ninjas Studio</a></li></ul><p><a href=\"https://leetcode.com/problems/search-insert-position/description/\">https://leetcode.com/problems/search-insert-position/description/</a></p><p><a href=\"https://www.codingninjas.com/studio/problems/ceiling-in-a-sorted-array_1825401?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\">Coding Ninjas Studio</a></p><p><a href=\"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/\">https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/</a></p><p><a href=\"https://www.codingninjas.com/studio/problems/occurrence-of-x-in-a-sorted-array_630456?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\">Coding Ninjas Studio</a></p><p>Thanks for reading.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a57c16cadad1\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "Binary search divides search space into two parts based on some intermediate results during the search this reduces the time complexity of the search problem. But, the underlying assumption is that search space should be sorted.\nIn this article, some problems share some common concepts in their solution.\nConsider a situation in which an array is sorted in ascending order. The array can have repeated values also. Here aim is to find the given target in this array.\nProblem 1: Finding the target in the array using binary search.\nProblem 2: Finding the first and last occurrences of the target in an array.\nProblem 3: Finding the insertion position of the target if it is not present.\nSolution 1: Remove the search space where the chance of finding the target is zero.\nSolution 2: Once the target element is found and it is possible that it can have multiple occurrences then continue searching in the left search space for the first occurrence and searching in the right search space for the last occurrence. Remember to record the latest occurrence of the target each time you find it.\nSolution 3: The pointer representing the left search space signifies that all numbers before the left or start pointer are smaller than the target. After traversing the whole search space with no target found the left or pointer signifies that all numbers before the last left or start pointer position are smaller than the target. The current position of the left pointer will be the insertion position for the target. If the last position of the left or start position is more than the maximum allowable index then the insertion position of the target is imaginary but a valid answer.\nBelow is the combined code for all the above solutions.\nclass Solution {\n    private static class BsResponse {\n        private boolean isElementPresent;\n        private int index;\n        public BsResponse(boolean isElementPresent, int index) {\n            this.isElementPresent = isElementPresent;\n            this.index = index;\n        }\n        public boolean isElementPresent() {\n            return isElementPresent;\n        }\n        public int getIndex() {\n            return index;\n        }\n    }\n    private static class BsRequest {\n        enum Option {\n            ANY_OCCURRENCE, FIRST_OCCURRENCE, LAST_OCCURRENCE,\n        }\n        private int[] arr;\n        private int target;\n        private int start;\n        private int end;\n        private Option option;\n        public BsRequest(int[] arr, int target, int start, int end, Option option) {\n            this.arr = arr;\n            this.target = target;\n            this.start = start;\n            this.end = end;\n            this.option = option;\n        }\n        public int[] getArr() {\n            return arr;\n        }\n        public int getTarget() {\n            return target;\n        }\n        public int getStart() {\n            return start;\n        }\n        public int getEnd() {\n            return end;\n        }\n        public Option getOption() {\n            return option;\n        }\n    }\n    private static BsResponse binarySearch(BsRequest request) {\n        int[] arr = request.getArr();\n        int target = request.getTarget();\n        int start = request.getStart();\n        int end = request.getEnd();\n        BsRequest.Option option = request.getOption();\n        boolean isElementPresent = false;\n        int index = -1;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (arr[mid] < target) {\n                start = mid + 1;\n            } else if (arr[mid] > target) {\n                end = mid - 1;\n            } else {\n                isElementPresent = true;\n                index = mid;\n                if (option.equals(BsRequest.Option.LAST_OCCURRENCE)) {\n                    start = mid + 1;\n                } else if (option.equals(BsRequest.Option.FIRST_OCCURRENCE)) {\n                    end = mid - 1;\n                } else if (option.equals(BsRequest.Option.ANY_OCCURRENCE)) {\n                    break;\n                }\n            }\n        }\n        return new BsResponse(isElementPresent, isElementPresent ? index : start);\n    }\n    private static void printAnswer(boolean isElementPresent, int target, int index) {\n        if (isElementPresent) {\n            System.out.println(\"Index of last occurrence of \" + target + \" is: \" + index);\n        } else {\n            System.out.println(\"Insertion position of \" + target + \" is: \" + index);\n        }\n    }\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 2, 2, 3, 3, 5};\n        int x = 2;\n        //solution\n        int n = arr.length;\n        BsRequest request_1 = new BsRequest(arr, x, 0, n - 1, BsRequest.Option.FIRST_OCCURRENCE);\n        BsResponse result_1 = binarySearch(request_1);\n        printAnswer(result_1.isElementPresent, x, result_1.index);\n        BsRequest request_2 = new BsRequest(arr, x, 0, n - 1, BsRequest.Option.LAST_OCCURRENCE);\n        BsResponse result_2 = binarySearch(request_2);\n        printAnswer(result_2.isElementPresent, x, result_2.index);\n        x = 4;\n        BsRequest request_3 = new BsRequest(arr, x, 0, n - 1, BsRequest.Option.ANY_OCCURRENCE);\n        BsResponse result_3 = binarySearch(request_3);\n        printAnswer(result_3.isElementPresent, x, result_3.index);\n    }\n}\nResponse for the above code is:\n\nThe following problems are related to the above solutions.\nhttps://leetcode.com/problems/binary-search/description/\n\nCoding Ninjas Studio\nCoding Ninjas Studio\n\nhttps://leetcode.com/problems/search-insert-position/description/\nCoding Ninjas Studio\nhttps://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/\nCoding Ninjas Studio\nThanks for reading.",
      "dc:creator": "Kushagra Raj Tiwari",
      "guid": "https://medium.com/p/a57c16cadad1",
      "categories": [
        "programming",
        "coding",
        "arrays",
        "binary-search"
      ],
      "isoDate": "2024-03-09T18:46:14.000Z"
    },
    {
      "creator": "Kushagra Raj Tiwari",
      "title": "[Blind 2] Counting Bits",
      "link": "https://medium.com/@KushagraRajTiwari/blind-2-counting-bits-e958cad5f6ea?source=rss-da71bf5101aa------2",
      "pubDate": "Fri, 01 Mar 2024 17:24:22 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*9CM3MnoQTXVHVsMU2PiKDg.jpeg\" /></figure><p>This blog is part of a blog series of Blind 75 coding problems and their solutions. Please get the list of all blind 75 problems <a href=\"https://docs.google.com/spreadsheets/d/1JjnorqPReEBwkKckq07cnpAOVysZM1Ltr1ZkgZMhgoE/edit?usp=drive_link\">here</a>.</p><p>Please read the <a href=\"https://leetcode.com/problems/counting-bits/description/\">problem</a> statement and try to solve it before reading the solution.</p><p><strong>Approach 1</strong></p><p>Calculate the number of ‘1’ s from the bit representation of a number from 0 to n.</p><p>Code for approach 1</p><pre>class Solution {<br>public:<br>    int getHammingWeight(int n) {<br>        int count = 0;<br>        while (n) {<br>            count++;<br>            n &amp;= n - 1;<br>        }<br>        return count;<br>    }<br>    vector&lt;int&gt; countBits(int n) {<br>        vector&lt;int&gt; ans;<br>        for (int i = 0; i &lt;= n; i++) {<br>            ans.push_back(getHammingWeight(i));<br>        }<br>        return ans;<br>    }<br>};</pre><p>Time complexity: O(nlogn)</p><p>Space complexity: O(n)</p><p><strong>Approach 2</strong></p><p>Let us write a bit representation of numbers from 0 to 16.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/958/1*o9sZFRsFPRTIQaBBHULtZw.png\" /></figure><p>One simple observation is that at every power value of 2, we are making the right-most bit ‘1’ and other bits ‘0’.</p><p>Consider numbers from 8 to 13, remove the right-most bit, and observe the new numbers.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*q9QvAr71A9WdoSPqaE-SjQ.png\" /></figure><p>Do we know the number of ‘1’ s in new numbers? Not sure. But, we can get the number of ‘1’ s in the bit representation of numbers from 8 to 13 by adding 1 with the number of ‘1’ s in the bit representation of new numbers i.e. count_1[8] = 1 + count_1[0], count_1[9] = 1 + count_1[1] and so on.</p><p>At every power of 2, the new number will be 0. And, the next number will be the (number-latest power of 2). All these observations can be concluded in the following image.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vCU-IUZVr-kibRtSY_YhMg.png\" /></figure><p>This dynamic programming technique.</p><p><strong>count[n] = 1 + count[n-offset]</strong></p><p>where the offset is the latest power of 2.</p><p>code for approach 2</p><pre>class Solution {<br>public:<br>    vector&lt;int&gt; countBits(int n) {<br>        vector&lt;int&gt; ans(n + 1, 0);<br>        int offset = 1;<br>        for (int i = 1; i &lt;= n; i++) {<br>            if (offset * 2 == i) {<br>                offset *= 2;<br>            }<br>            ans[i] = ans[i - offset] + 1;<br>        }<br>        return ans;<br>    }<br>};</pre><p>Time complexity: O(n)</p><p>Space complexity: O(n)</p><p>Thanks for reading. Waiting for comments. 😊</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e958cad5f6ea\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "This blog is part of a blog series of Blind 75 coding problems and their solutions. Please get the list of all blind 75 problems here.\nPlease read the problem statement and try to solve it before reading the solution.\nApproach 1\nCalculate the number of ‘1’ s from the bit representation of a number from 0 to n.\nCode for approach 1\nclass Solution {\npublic:\n    int getHammingWeight(int n) {\n        int count = 0;\n        while (n) {\n            count++;\n            n &= n - 1;\n        }\n        return count;\n    }\n    vector<int> countBits(int n) {\n        vector<int> ans;\n        for (int i = 0; i <= n; i++) {\n            ans.push_back(getHammingWeight(i));\n        }\n        return ans;\n    }\n};\nTime complexity: O(nlogn)\nSpace complexity: O(n)\nApproach 2\nLet us write a bit representation of numbers from 0 to 16.\n\nOne simple observation is that at every power value of 2, we are making the right-most bit ‘1’ and other bits ‘0’.\nConsider numbers from 8 to 13, remove the right-most bit, and observe the new numbers.\n\nDo we know the number of ‘1’ s in new numbers? Not sure. But, we can get the number of ‘1’ s in the bit representation of numbers from 8 to 13 by adding 1 with the number of ‘1’ s in the bit representation of new numbers i.e. count_1[8] = 1 + count_1[0], count_1[9] = 1 + count_1[1] and so on.\nAt every power of 2, the new number will be 0. And, the next number will be the (number-latest power of 2). All these observations can be concluded in the following image.\n\nThis dynamic programming technique.\ncount[n] = 1 + count[n-offset]\nwhere the offset is the latest power of 2.\ncode for approach 2\nclass Solution {\npublic:\n    vector<int> countBits(int n) {\n        vector<int> ans(n + 1, 0);\n        int offset = 1;\n        for (int i = 1; i <= n; i++) {\n            if (offset * 2 == i) {\n                offset *= 2;\n            }\n            ans[i] = ans[i - offset] + 1;\n        }\n        return ans;\n    }\n};\nTime complexity: O(n)\nSpace complexity: O(n)\nThanks for reading. Waiting for comments. 😊",
      "dc:creator": "Kushagra Raj Tiwari",
      "guid": "https://medium.com/p/e958cad5f6ea",
      "categories": [
        "dynamic-programming",
        "math",
        "programming",
        "coding",
        "bit-manipulation"
      ],
      "isoDate": "2024-03-01T17:24:22.000Z"
    },
    {
      "creator": "Kushagra Raj Tiwari",
      "title": "[Blind 1] Number of one-bits",
      "link": "https://medium.com/@KushagraRajTiwari/blind-1-number-of-one-bits-fa139cbaf18d?source=rss-da71bf5101aa------2",
      "pubDate": "Fri, 01 Mar 2024 11:39:23 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*9CM3MnoQTXVHVsMU2PiKDg.jpeg\" /></figure><p>This blog is part of a blog series of Blind 75 coding problems and their solutions. Please get the list of all blind 75 problems <a href=\"https://docs.google.com/spreadsheets/d/1JjnorqPReEBwkKckq07cnpAOVysZM1Ltr1ZkgZMhgoE/edit?usp=drive_link\">here</a>.</p><p>Please read the <a href=\"https://leetcode.com/problems/number-of-1-bits/description/\">problem</a> statement and try to solve it before reading the solution.</p><p><strong>Approach 1</strong></p><p>Let’s say the given number is n,</p><ol><li>Find the right-most bit, if it is ‘1’ count it.</li><li>Right shift (bitwise) number n by 1 bit.</li><li>Repeat step 1 and step 2 until number n is not 0.</li></ol><p>How to get the right-most bit? There are two ways to do it.</p><ol><li>Take bitwise AND (&amp;) of n with ‘1’.</li><li>Divide n by 2, and the remainder will be the answer.</li></ol><p>How to right shift number n.</p><ol><li>Use the right shift operator &gt;&gt; (available in most coding languages).</li><li>Divide n by 2, and the quotient will be the answer.</li></ol><p>Code for approach 1.</p><pre>class Solution {<br>public:<br>    int hammingWeight(uint32_t n) {<br>        int count = 0;<br>        while (n) {<br>            count += n % 2;<br>            n &gt;&gt;= 1;<br>        }<br>        return count;<br>    }<br>};</pre><p>Time complexity : O(1)</p><p>Space complexity: O(1)</p><p><strong>Approach 2</strong></p><ol><li>Subtract one from the number n to get rid of ‘1’ from n, say the number is n-1.</li><li>Now, restore the remaining bits by AND operation between n and n-1.</li><li>Repeat step 1 and step 2 until n is not zero.</li><li>The total iteration count will be the answer.</li></ol><p>e.g. n = 1000010010</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*z3n4TOxFzwQEnbQHRo7iCA.png\" /></figure><p>A good trick for quick implementation.</p><p>Code for approach 2.</p><pre>class Solution {<br>public:<br>    int hammingWeight(uint32_t n) {<br>        int count = 0;<br>        while (n) {<br>            count++;<br>            n &amp;= n - 1;<br>        }<br>        return count;<br>    }<br>};</pre><p>Time complexity: O(1)</p><p>Space complexity: O(1)</p><p>Thanks for reading. Waiting for comments.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fa139cbaf18d\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "This blog is part of a blog series of Blind 75 coding problems and their solutions. Please get the list of all blind 75 problems here.\nPlease read the problem statement and try to solve it before reading the solution.\nApproach 1\nLet’s say the given number is n,\n\nFind the right-most bit, if it is ‘1’ count it.\nRight shift (bitwise) number n by 1 bit.\nRepeat step 1 and step 2 until number n is not 0.\n\nHow to get the right-most bit? There are two ways to do it.\n\nTake bitwise AND (&) of n with ‘1’.\nDivide n by 2, and the remainder will be the answer.\n\nHow to right shift number n.\n\nUse the right shift operator >> (available in most coding languages).\nDivide n by 2, and the quotient will be the answer.\n\nCode for approach 1.\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int count = 0;\n        while (n) {\n            count += n % 2;\n            n >>= 1;\n        }\n        return count;\n    }\n};\nTime complexity : O(1)\nSpace complexity: O(1)\nApproach 2\n\nSubtract one from the number n to get rid of ‘1’ from n, say the number is n-1.\nNow, restore the remaining bits by AND operation between n and n-1.\nRepeat step 1 and step 2 until n is not zero.\nThe total iteration count will be the answer.\n\ne.g. n = 1000010010\n\nA good trick for quick implementation.\nCode for approach 2.\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int count = 0;\n        while (n) {\n            count++;\n            n &= n - 1;\n        }\n        return count;\n    }\n};\nTime complexity: O(1)\nSpace complexity: O(1)\nThanks for reading. Waiting for comments.",
      "dc:creator": "Kushagra Raj Tiwari",
      "guid": "https://medium.com/p/fa139cbaf18d",
      "categories": [
        "bit-manipulation",
        "coding",
        "blind75"
      ],
      "isoDate": "2024-03-01T11:39:23.000Z"
    },
    {
      "creator": "Kushagra Raj Tiwari",
      "title": "[Leetcode Hard 1] Nth Magical Number",
      "link": "https://medium.com/@KushagraRajTiwari/nth-magical-number-5c4a3cb9bb5b?source=rss-da71bf5101aa------2",
      "pubDate": "Thu, 29 Feb 2024 18:27:53 GMT",
      "content:encoded": "<p>This article has a detailed solution to this Leetcode <a href=\"https://leetcode.com/problems/nth-magical-number/description/\">problem</a>.</p><p><strong>Question</strong></p><p>A positive integer is <em>magical</em> if it is divisible by either a or b.</p><p>Given the three integers n, a, and b, return the nth magical number. Since the answer may be very large, <strong>return it modulo </strong>109 + 7.</p><p><strong>Brute Force Approach</strong></p><p>Start from 1 and count iterations till the nth magical number is achieved.</p><pre>class Solution {<br>public:<br>    int mod = 1e9 + 7;<br><br>    int nthMagicalNumber(int n, int a, int b) {<br>        int k = min(a, b);<br>        int count = 0;<br>        while (count &lt; n) {<br>            if (k % a == 0 || k % b == 0) {<br>                count++;<br>            }<br>            k++;<br>        }<br>        return (k - 1) % mod;<br>    }<br>};</pre><p>Time Complexity: O(n)</p><p>Space Complexity: O(1)</p><p>The above code will result in TLE.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0WGBq5QUPgmZEJ6GwMg5Zg.png\" /></figure><p><strong>Optimized Approach</strong></p><p>The intuition behind the optimized approach</p><ol><li>The minimum number which is divisible by <strong>a </strong>or<strong> b</strong> is a minimum of a and b.</li><li>The maximum number that is divisible by <strong>a</strong> or <strong>b</strong> is a nth multiple of the minimum of a and b.</li><li>Between minimum and maximum numbers, all the numbers are sorted in increasing order.</li></ol><p>There is a range that has sorted elements. The idea is <strong>binary search</strong>, but <strong>how to divide search space into two parts</strong>?</p><p>At any point, we can calculate the number of multiples of a or b. If at any number in the range (say K ), the count of multiples of a or b exceeds n then we can ignore search space greater than K else we can ignore search space less than K because we need the exact <strong>nth</strong> multiple of a or b. If at K, we get the count of multiples of a or b equal to n then we will check if K is a multiple of a or b our answer is K if K is not a multiple of a or b then we will move left because number of multiples is n, we will get our answer in left search space.</p><p>How to get the number of multiples of a or b at number K.</p><pre>Count of multiples of a = K / a<br>Count of multiples of b = K / b<br>Count of multiples of LCM(a, b) = K / LCM(a, b)<br><br>Total count = K / a + K / b - K / LCM (a, b)<br><br>LCM(a, b) = a * b / HCF(a, b)</pre><p>Let’s test our approach.</p><p>Given n = 4, a = 2, b = 3</p><p>Multiples of 2 = 2, 4, 6, 8 …</p><p>Multiples of 3 = 3, 6, 9, 12 …</p><p>First 4 multiples of 2 or 3 = 2, 3, 4, 6</p><p>Our answer should be 6.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BNQmViDAEO6EppC3z4TrFw.png\" /></figure><pre>class Solution {<br>public:<br>    int mod = 1e9 + 7;<br>    int getMultipleCount(long long num, int a, int b, int lcm) {<br>        return (num / a) + (num / b) - (num / lcm);<br>    }<br>    int getLcm(int a, int b) {<br>        int lcm = 0, hcf;<br>        int oA = a, oB = b;<br>        //hcf<br>        while (a != 0 &amp;&amp; b != 0) {<br>            if (a &gt; b) {<br>                a = a % b;<br>            }<br>            else {<br>                b = b % a;<br>            }<br>        }<br>        if (a == 0) {<br>            hcf = b;<br>        }<br>        else {<br>            hcf = a;<br>        }<br>        return (oA * oB) / hcf;<br>    }<br>    int nthMagicalNumber(int n, int a, int b) {<br>        long long left = min(a, b) * 1;<br>        long long right = (min((a * 1L), (b * 1L)) * (n * 1L));<br>        int lcm = getLcm(a, b);<br>        long long ans = right;<br>        while (left &lt;= right) {<br>            long long mid = left + (right - left) / 2;<br>            int factorCount = getMultipleCount(mid, a, b, lcm);<br>            if (factorCount &gt;= n) {<br>                if (factorCount == n &amp;&amp; (mid % a == 0 || mid % b == 0)) {<br>                    ans = mid;<br>                    break;<br>                }<br>                else {<br>                    right = mid - 1;<br>                }<br>            }<br>            else {<br>                left = mid + 1;<br>            }<br>        }<br>        return ans % mod;<br>    }<br>};<br><br></pre><p>Time complexity: O(log(min(a, b) * (n — 1)))</p><p>Space complexity: O(1)</p><p>Thanks for reading. Waiting for valuable comments.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5c4a3cb9bb5b\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "This article has a detailed solution to this Leetcode problem.\nQuestion\nA positive integer is magical if it is divisible by either a or b.\nGiven the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.\nBrute Force Approach\nStart from 1 and count iterations till the nth magical number is achieved.\nclass Solution {\npublic:\n    int mod = 1e9 + 7;\n    int nthMagicalNumber(int n, int a, int b) {\n        int k = min(a, b);\n        int count = 0;\n        while (count < n) {\n            if (k % a == 0 || k % b == 0) {\n                count++;\n            }\n            k++;\n        }\n        return (k - 1) % mod;\n    }\n};\nTime Complexity: O(n)\nSpace Complexity: O(1)\nThe above code will result in TLE.\n\nOptimized Approach\nThe intuition behind the optimized approach\n\nThe minimum number which is divisible by a or b is a minimum of a and b.\nThe maximum number that is divisible by a or b is a nth multiple of the minimum of a and b.\nBetween minimum and maximum numbers, all the numbers are sorted in increasing order.\n\nThere is a range that has sorted elements. The idea is binary search, but how to divide search space into two parts?\nAt any point, we can calculate the number of multiples of a or b. If at any number in the range (say K ), the count of multiples of a or b exceeds n then we can ignore search space greater than K else we can ignore search space less than K because we need the exact nth multiple of a or b. If at K, we get the count of multiples of a or b equal to n then we will check if K is a multiple of a or b our answer is K if K is not a multiple of a or b then we will move left because number of multiples is n, we will get our answer in left search space.\nHow to get the number of multiples of a or b at number K.\nCount of multiples of a = K / a\nCount of multiples of b = K / b\nCount of multiples of LCM(a, b) = K / LCM(a, b)\nTotal count = K / a + K / b - K / LCM (a, b)\nLCM(a, b) = a * b / HCF(a, b)\nLet’s test our approach.\nGiven n = 4, a = 2, b = 3\nMultiples of 2 = 2, 4, 6, 8 …\nMultiples of 3 = 3, 6, 9, 12 …\nFirst 4 multiples of 2 or 3 = 2, 3, 4, 6\nOur answer should be 6.\n\nclass Solution {\npublic:\n    int mod = 1e9 + 7;\n    int getMultipleCount(long long num, int a, int b, int lcm) {\n        return (num / a) + (num / b) - (num / lcm);\n    }\n    int getLcm(int a, int b) {\n        int lcm = 0, hcf;\n        int oA = a, oB = b;\n        //hcf\n        while (a != 0 && b != 0) {\n            if (a > b) {\n                a = a % b;\n            }\n            else {\n                b = b % a;\n            }\n        }\n        if (a == 0) {\n            hcf = b;\n        }\n        else {\n            hcf = a;\n        }\n        return (oA * oB) / hcf;\n    }\n    int nthMagicalNumber(int n, int a, int b) {\n        long long left = min(a, b) * 1;\n        long long right = (min((a * 1L), (b * 1L)) * (n * 1L));\n        int lcm = getLcm(a, b);\n        long long ans = right;\n        while (left <= right) {\n            long long mid = left + (right - left) / 2;\n            int factorCount = getMultipleCount(mid, a, b, lcm);\n            if (factorCount >= n) {\n                if (factorCount == n && (mid % a == 0 || mid % b == 0)) {\n                    ans = mid;\n                    break;\n                }\n                else {\n                    right = mid - 1;\n                }\n            }\n            else {\n                left = mid + 1;\n            }\n        }\n        return ans % mod;\n    }\n};\n\nTime complexity: O(log(min(a, b) * (n — 1)))\nSpace complexity: O(1)\nThanks for reading. Waiting for valuable comments.",
      "dc:creator": "Kushagra Raj Tiwari",
      "guid": "https://medium.com/p/5c4a3cb9bb5b",
      "categories": [
        "gcd",
        "binary-search",
        "coding",
        "mathematics",
        "programming"
      ],
      "isoDate": "2024-02-29T18:27:53.000Z"
    },
    {
      "creator": "Kushagra Raj Tiwari",
      "title": "Find an overlapped area between two rectangles.",
      "link": "https://medium.com/@KushagraRajTiwari/find-an-overlapped-area-between-two-rectangles-57a2a062a567?source=rss-da71bf5101aa------2",
      "pubDate": "Thu, 29 Feb 2024 13:01:41 GMT",
      "content:encoded": "<p>The information in this article may be easy for many people but I am still explaining this problem.</p><p>This article is inspired by this Leetcode <a href=\"https://leetcode.com/problems/rectangle-area/description/\">problem</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MANQu1Fck7_Ozfss-8SBlA.png\" /></figure><p>In this problem, two rectangles are given to find the total area covered by two rectangles. A rectangle here is represented by the bottom left corner and top right corner. The solution is simple, add the areas of two rectangles and subtract the common or overlapped area (if any) between these two rectangles, a simple union. It is easy to find areas of two rectangles but the probable confusion is <strong>how to find the common or overlapped area</strong>.</p><p>In this blog, we will find the common or overlapped area between two rectangles.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*P8Fj0-TTL1xIi2RDbw6ppA.jpeg\" /></figure><p>Refer above image for a better visual understanding of the problem and solution.</p><p><strong>Problem</strong></p><p>Given two rectangles in a two-dimensional plane A and B. A is represented by its bottom left corner A1(ax1, ay1) and top right corner A2(ax2, ay2). Similarly, B is represented by its bottom left corner B1(bx1, by1) and top right corner B2(bx2, by2).</p><p><strong>Solution</strong></p><p>The common area will be a rectangle overlapped by P, Q, S, and R. The problem will be solved if we can find the <strong>bottom left corner R</strong> and <strong>top right corner Q</strong>.</p><p><strong>Finding the bottom left corner (R)</strong></p><p><strong>X coordinate</strong> of the corner <strong>R</strong> will be either <strong>ax1</strong> or <strong>bx1</strong>. How to decide? Represent ax1 and bx1 on the horizontal number line, the <strong>larger</strong> value among ax1 and bx1 will decide the <strong>left starting</strong> boundary of the common area because the value that comes after the other will decide the starting boundary of the common area.</p><p>Similarly, for the <strong>Y coordinate</strong> of the corner <strong>R</strong>. Represent ay1 and by1 on the vertical number line, the <strong>larger</strong> value among ay1 and by1 will decide the <strong>bottom starting</strong> boundary of the common area.</p><p><strong>R(x, y) = max(ax1, bx1), max(ay1, by1)</strong></p><p><strong>Finding the top right corner (Q)</strong></p><p><strong>X coordinate</strong> of the corner <strong>Q</strong> will be either <strong>ax2</strong> or <strong>bx2</strong>. How to decide? Represent ax2 and bx2 on the horizontal number line, the <strong>smaller</strong> value among ax2 and bx2 will decide the <strong>right closing</strong> boundary of the common area because the value that comes before the other will decide the closing boundary of the common area.</p><p>Similarly, for the <strong>Y coordinate</strong> of the corner <strong>Q</strong>. Represent ay2 and by2 on the vertical number line, the <strong>smaller</strong> value among ay2 and by2 will decide the <strong>top</strong> <strong>closing</strong> boundary of the common area.</p><p><strong>Q(x, y) = min(ax2, bx2), min(ay2, by2)</strong></p><p>Now, that the coordinates of the bottom left corner (R) and top right corner (Q) of the common area are decided, we can easily calculate the common area.</p><p><strong>Width of common area</strong> = max (Q(x)-R(x), 0)</p><p><strong>Height of common area</strong> = max(Q(y)-R(y), 0)</p><p>We are taking the maximum of coordinate differences and zero because in case height or width are non-positive then the common area will not exist.</p><p>Thanks for reading. Waiting for comments !!!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=57a2a062a567\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "The information in this article may be easy for many people but I am still explaining this problem.\nThis article is inspired by this Leetcode problem.\n\nIn this problem, two rectangles are given to find the total area covered by two rectangles. A rectangle here is represented by the bottom left corner and top right corner. The solution is simple, add the areas of two rectangles and subtract the common or overlapped area (if any) between these two rectangles, a simple union. It is easy to find areas of two rectangles but the probable confusion is how to find the common or overlapped area.\nIn this blog, we will find the common or overlapped area between two rectangles.\n\nRefer above image for a better visual understanding of the problem and solution.\nProblem\nGiven two rectangles in a two-dimensional plane A and B. A is represented by its bottom left corner A1(ax1, ay1) and top right corner A2(ax2, ay2). Similarly, B is represented by its bottom left corner B1(bx1, by1) and top right corner B2(bx2, by2).\nSolution\nThe common area will be a rectangle overlapped by P, Q, S, and R. The problem will be solved if we can find the bottom left corner R and top right corner Q.\nFinding the bottom left corner (R)\nX coordinate of the corner R will be either ax1 or bx1. How to decide? Represent ax1 and bx1 on the horizontal number line, the larger value among ax1 and bx1 will decide the left starting boundary of the common area because the value that comes after the other will decide the starting boundary of the common area.\nSimilarly, for the Y coordinate of the corner R. Represent ay1 and by1 on the vertical number line, the larger value among ay1 and by1 will decide the bottom starting boundary of the common area.\nR(x, y) = max(ax1, bx1), max(ay1, by1)\nFinding the top right corner (Q)\nX coordinate of the corner Q will be either ax2 or bx2. How to decide? Represent ax2 and bx2 on the horizontal number line, the smaller value among ax2 and bx2 will decide the right closing boundary of the common area because the value that comes before the other will decide the closing boundary of the common area.\nSimilarly, for the Y coordinate of the corner Q. Represent ay2 and by2 on the vertical number line, the smaller value among ay2 and by2 will decide the top closing boundary of the common area.\nQ(x, y) = min(ax2, bx2), min(ay2, by2)\nNow, that the coordinates of the bottom left corner (R) and top right corner (Q) of the common area are decided, we can easily calculate the common area.\nWidth of common area = max (Q(x)-R(x), 0)\nHeight of common area = max(Q(y)-R(y), 0)\nWe are taking the maximum of coordinate differences and zero because in case height or width are non-positive then the common area will not exist.\nThanks for reading. Waiting for comments !!!",
      "dc:creator": "Kushagra Raj Tiwari",
      "guid": "https://medium.com/p/57a2a062a567",
      "categories": [
        "coordinate-geometry",
        "mathematics",
        "coding"
      ],
      "isoDate": "2024-02-29T13:01:41.000Z"
    },
    {
      "creator": "Kushagra Raj Tiwari",
      "title": "Customer Transaction Prediction using LightGBM",
      "link": "https://medium.com/analytics-vidhya/https-medium-com-kushagrarajtiwari-customer-transaction-prediction-3191c6c634dc?source=rss-da71bf5101aa------2",
      "pubDate": "Tue, 02 Jul 2019 05:23:22 GMT",
      "content:encoded": "<h4>Exploratory Data Analysis and modelling with imbalanced data using LightGBM.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*UX9hoBZJfvTa_PPEsXMeHg.jpeg\" /><figcaption><a href=\"https://www.pexels.com/photo/working-macbook-computer-keyboard-34577/\">Source</a></figcaption></figure><h4>I was learning Python for data analysis and wanted to apply the concepts on a real data set — then I found <a href=\"https://www.kaggle.com/c/santander-customer-transaction-prediction\">this problem.</a></h4><p>In this problem, we need to identify which customers will make a specific transaction in the future, irrespective of the amount of money transacted.</p><p>Training data is an anonymous data set containing 200 numeric feature variables, the binary target column, and a string ID_code column and 2,00,000 observations. Test data includes 200 anonymous numeric variables and a string ID_code column and 2,00,000 observations. This is a binary classification problem under supervised machine learning algorithm. The task is to predict the value of target column in the test set.</p><p>In this article I will discuss what is general business significance of this problem? How to explore data? And how to built a Light GBM model for classification problem on imbalanced data with tuning of model parameters. Python code used for this article is <a href=\"https://github.com/KUSHAGRARAJTIWARI/Santander-Customer-Transaction-prediction-/blob/master/santander%20customer%20prediction_final.ipynb\">here.</a> Let’s start this journey 👇.</p><h3><strong>General Business Significance</strong></h3><p>This project can help company in following ways-</p><p>1. Segmenting customers into small groups and addressing individual customers based on actual behaviors — instead of hard-coding any preconceived notions or assumptions of what makes customers similar to one another, and instead of only looking at aggregated data which hides important facts about individual customers.</p><p>2. Accurately predicting the future behavior of customers (e.g., transaction prediction) using predictive customer behavior modeling techniques — instead of just looking in the rear-view mirror of historical data.</p><p>3. Using advanced calculations to determine the customer lifetime value (LTV) of every customer and basing decisions on it — instead of looking only at the short-term revenue that a customer may bring the organization.</p><p>4. Knowing, based on objective metrics, exactly what marketing actions to do now, for each customer, in order to maximize the long-term value of every customer.</p><p>5. Using marketing machine learning technology that will reveal insights and make recommendations for improving customer marketing that human marketers are unlikely to spot on their own.</p><h3><strong>Exploratory Data Analysis</strong></h3><p>Exploratory data analysis mainly includes missing value analysis, outlier analysis, correlation analysis, descriptive analysis and visualizations to gain insights from data.</p><p>First Let’s check the amount of minority and majority class in the training data.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/466/1*7jiJA7pIMDXUAWQEijc7Rg.png\" /><figcaption>typically imbalanced data</figcaption></figure><p>Minority class is almost 10% of target variable in train data.</p><p><strong>Dealing with Imbalanced data set</strong></p><p>Before modelling for this data set let us understand how to deal with imbalanced data set for classification problem. Traditional Machine Learning algorithms tend to produce unsatisfactory classifiers when faced with imbalanced data sets. For any imbalanced data set, if the event to be predicted belongs to the minority class and the event rate is less than 10%, it is usually referred to as a rare event. The conventional model evaluation methods do not accurately measure model performance when faced with imbalanced data sets. Standard classifier algorithms like Decision Tree and Logistic Regression have a bias towards classes which have large number of instances. They tend to only predict the majority class data. The features of the minority class are treated as noise and are often ignored. Thus, there is a high probability of mis-classification of the minority class as compared to the majority class. Performance of classification algorithm is measured by the Confusion Matrix which contains information about the actual and the predicted class. Thus we need to deal with this imbalanced data set.</p><p>Here are some methods to <a href=\"https://towardsdatascience.com/methods-for-dealing-with-imbalanced-data-5b761be45a18\">deal with imbalanced data</a> for classification.</p><p>There is no missing values in both train and test data.</p><p>Let us check the distribution of first 20 numerical features in train data by plotting histograms of each variable. (For distribution of complete features go <a href=\"https://github.com/KUSHAGRARAJTIWARI/Santander-Customer-Transaction-prediction-/blob/master/distribution%20of%20numeric%20variables.png\">here</a>.)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cpLyhRj0hA8VxzeDsMrl5Q.png\" /><figcaption>distribution of first 20 variables in train data.</figcaption></figure><p>Looking at the shapes of histograms we can easily conclude that almost all numeric variables follow normal distribution.</p><p>I have decided to see if there are any outliers in the data set according to <a href=\"https://en.wikipedia.org/wiki/Chauvenet%27s_criterion\">Chauvenet’s criterion</a>. After removing outliers (0.87% of total observations) we have 1,98,264 observations in train data and 1,98,250 observations in test data.</p><p>Now let’s check the distribution of first 20 variables in train data with both of the target classes. (For checking distribution of all variables go <a href=\"https://github.com/KUSHAGRARAJTIWARI/Santander-Customer-Transaction-prediction-/blob/master/Distribution%20of%20column%20per%20each%20class.png\">here</a>.)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3de8CiCkuZwllxtgVyPdVw.png\" /><figcaption>distribution of first 20 variables each class in training data.</figcaption></figure><p>From the above plots we can see that some variables show different distributions for different target classes. But using tree based algorithms can deal with these different distributions in target class because recovering 0 and 1 is exactly what a tree based classification model does. For each observation, a model can assign the probability that that observation belongs to 0 and the probability that that value belongs to 1.</p><p>Distribution of first 20 numeric variables in the training and test data. (For complete distribution go <a href=\"https://github.com/KUSHAGRARAJTIWARI/Santander-Customer-Transaction-prediction-/blob/master/Distribution%20of%20train%20and%20test%20data..png\">here.</a>)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aVEuuzGXgJOHepnNEG7rvw.png\" /><figcaption>distribution of first 20 variables in train and test data.</figcaption></figure><p>The train and test seems to be well balanced with respect to distribution of the numeric variables.</p><p>Visualizing class wise descriptive statistics such as mean ,median, standard deviation, minimum, maximum, kurtosis and skewness of train data I plotted the following graphs. Kurtosis and skewness give information about the shape of distribution of data. (To know significance of these shape variables go <a href=\"https://www.spcforexcel.com/knowledge/basic-statistics/are-skewness-and-kurtosis-useful-statistics\">here</a>.)</p><p>Class wise distribution of mean in training data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kj_o3kRo7_LJvVhnyPl5qQ.png\" /></figure><p>Class wise distribution of median in training data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*50tYz_Lxvp5C9jaiHNBAiw.png\" /></figure><p>Class wise distribution of standard deviation in training data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nDM_rH8mjDMd8MUrdfAQSw.png\" /></figure><p>Class wise distribution of skewness in training data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lO0vIChG9LYZsRaOMgDDoQ.png\" /></figure><p>Class wise distribution of kurtosis in training data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YfUyfSiYv6qqrBIA3LzAaQ.png\" /></figure><p>Class wise distribution of minimum in training data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*C1GdQ93QuL7iCNV1F6uhpg.png\" /></figure><p>Class wise distribution of maximum in training data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*90DsivP6m8_W4G-MPJkj_g.png\" /></figure><p>Visualizing descriptive statistics such as mean ,median, standard deviation, minimum, maximum, kurtosis and skewness of both the training and test data, I plotted the following graphs.</p><p>Distribution of mean in training and test data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0EgUh3iMqFBMw2p5Rib_dg.png\" /></figure><p>Distribution of median in training and test data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cPXxogZhvvoRFyepFTjDwA.png\" /></figure><p>Distribution of standard deviation in training and test data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*imFdL6NgSRE8Zkc2P2p-4w.png\" /></figure><p>Distribution of skewness in training and test data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*B2cz339CNfbYaAVzw6Cd2w.png\" /></figure><p>Distribution of kurtosis in training and test data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LNjo6x5ulR8c8PgxWQvyJA.png\" /></figure><p>Distribution of minimum in training and test data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*R6sLEctU0Umx16UNptRH8A.png\" /></figure><p>Distribution of maximum in training and test data</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U373woC8e-nGIB0dhqn0Gw.png\" /></figure><p><strong>We can make a few observations here:</strong></p><p>Standard deviation is relatively large for both training and test variable data. However, the min, max, mean, median, standard deviation values for training and test data looks quite close. Mean values are distributed over a large range. Moreover, mean and median have similar distribution. Both training and test data is Leptokurtic and negatively skewed.</p><p>Now checking correlation among numerical variables, minimum and maximum correlation among numerical variables in train data are -0.009839 and 0.009676 respectively. This shows that the correlations between the numerical data are close to zero. That means that most of the numerical data are almost uncorrelated between them.</p><p>At this point I will go for Principal component analysis (PCA) to check whether all 200 variables are useful or we can reduce features at this point of time. For this I will plot the experienced variance obtained from PCA. If it forms a straight line with slope 1 then we can conclude that the data set have already gone with PCA. (Know more about PCA <a href=\"https://towardsdatascience.com/a-step-by-step-explanation-of-principal-component-analysis-b836fb9c97e2\">here</a>.)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/373/1*nCrRakLKFdi52H7DXhP8yA.png\" /><figcaption>Explained variance plot corresponding to different numbers of numeric variables.</figcaption></figure><p>Thus we have to go with all 200 features.</p><h3>Feature Engineering</h3><p>Add row wise descriptive statistics i.e. mean, median, standard deviation, minimum, maximum, kurtosis, skewness and sum as separate features in training data set. I created 200 new features based on the original 200 features where the new values for these new features would be the number of unique occurrences (frequency) of the value in each cell of a particular variable. Often there can be relevant information in the frequency, depending on how the categories are drawn. But we have to be cautious while adding features. We should check duplicate observations in both train and test data. There are 1,00,000 observations found which are duplicate in test data.</p><p>Now I have 410 variables in the training data set and 409 in the test data set.</p><p>Before going for modelling let’s have some stuff about the classification evaluation metric AUC-ROC Score (good understanding of <a href=\"https://towardsdatascience.com/understanding-confusion-matrix-a9ad42dcfd62\">confusion matrix</a> is required.). It is one of the most important evaluation metrics for checking any classification’s performance. It is also written as AUC-ROC (Area Under the Receiver Operating Characteristics). AUC-ROC curve is a performance measurement for classification problem at various thresholds settings. ROC is a probability curve and AUC represents degree or measure of separability. It tells how much model is capable of distinguishing between classes. Higher the AUC, the better the model is at predicting 0 as 0 and 1 as 1. The ROC curve is plotted with True Positive Rate (TPR) against the False Positive Rate (FPR) where TPR is on y-axis and FPR is on the x-axis.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/636/1*PUDp3DV5B-8br3NKhbgZTA.png\" /><figcaption>Representation of ROC.</figcaption></figure><p><strong>Why to use Light GBM</strong>?</p><p>As we I discussed earlier in this article, our data set is imbalanced and thus we should not use traditional models like logistic regression. Idea about Naive Bayes is good but we should assure independence of predictor variables as we have almost uncorrelated predictor variables but that do not assure about independence between them.</p><p>Light GBM builds trees one at a time, where each new tree helps to correct errors made by previously trained tree. It performs the optimization in function space (rather than in parameter space) which makes the use of custom loss functions much easier. It is also faster in speed and accuracy as compared to bagging and adaptive boosting. It is capable of performing equally good with large data sets with a significant reduction in training time as compared to XGBOOST. But along with these advantages there is most disadvantageous feature of LGBM i.e. <a href=\"https://lightgbm.readthedocs.io/en/latest/Parameters-Tuning.html\">parameter tuning in LightGBM</a>. It should be done carefully. (Know more about <a href=\"https://lightgbm.readthedocs.io/en/latest/Parameters.html\">Light GBM parameters</a>.)</p><h3><strong>Modelling</strong></h3><p>After modelling with LightGBM with standard parameters, the AUC Score was 0.88576. After adding features and modelling with same standard parameters before modelling then I got AUC Score 0.89968. After tuning parameters and using <a href=\"https://medium.com/datadriveninvestor/k-fold-and-other-cross-validation-techniques-6c03a2563f1e\">K fold Stratified cross validation</a> with k=10 I got AUC Score 9.0600.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/422/1*yDeQa2g-eobWF_-c4HnsUA.png\" /><figcaption>ROC with scaled threshold values</figcaption></figure><p>Finally, calculating other metrics of binary classification.</p><pre>Accuracy Score for LightGBM is  0.86031<br>Precision Score for  LightGBM is  0.777291272763459<br>Recall Score for LightGBM is  0.39970320335687237<br>f1 Score for LightGBM is  0.527930789767159</pre><p>Further Improvements can be done by-</p><p>Using Parallel Processing with LightGBM Algorithm.</p><p>Taking a try for XGBoost for faster speeds.</p><p>For expert view on this problem go<a href=\"https://www.kaggle.com/cdeotte/200-magical-models-santander-0-920/notebook\"> here</a>.</p><h3><strong>End Notes</strong></h3><p>This was a binary classification problem on a typically unbalanced data set with no missing values. Predictor variables are anonymous and numeric and target variable is categorical. Visualizing descriptive features and finally I got to know that these variables are not correlated among themselves. After that I decided to treat imbalanced data set. Modelling with LightGBM, using the standard model parameters with feature engineered data I got AUC-Score of 0.899 and after tuning parameters with K fold stratified sampling final value of AUC Score is 0.90600.</p><h3><strong>References</strong></h3><p>I have taken references for this article from <a href=\"https://www.kaggle.com/cdeotte/200-magical-models-santander-0-920/notebook\">https://www.kaggle.com/cdeotte/200-magical-models-santander-0-920/notebook</a> and other links mentioned in this article. I am sure these techniques will be useful and you will get something from this article. Till then Happy Analyzing! 😎.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3191c6c634dc\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/analytics-vidhya/https-medium-com-kushagrarajtiwari-customer-transaction-prediction-3191c6c634dc\">Customer Transaction Prediction using LightGBM</a> was originally published in <a href=\"https://medium.com/analytics-vidhya\">Analytics Vidhya</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "content:encodedSnippet": "Exploratory Data Analysis and modelling with imbalanced data using LightGBM.\nSource\nI was learning Python for data analysis and wanted to apply the concepts on a real data set — then I found this problem.\nIn this problem, we need to identify which customers will make a specific transaction in the future, irrespective of the amount of money transacted.\nTraining data is an anonymous data set containing 200 numeric feature variables, the binary target column, and a string ID_code column and 2,00,000 observations. Test data includes 200 anonymous numeric variables and a string ID_code column and 2,00,000 observations. This is a binary classification problem under supervised machine learning algorithm. The task is to predict the value of target column in the test set.\nIn this article I will discuss what is general business significance of this problem? How to explore data? And how to built a Light GBM model for classification problem on imbalanced data with tuning of model parameters. Python code used for this article is here. Let’s start this journey 👇.\nGeneral Business Significance\nThis project can help company in following ways-\n1. Segmenting customers into small groups and addressing individual customers based on actual behaviors — instead of hard-coding any preconceived notions or assumptions of what makes customers similar to one another, and instead of only looking at aggregated data which hides important facts about individual customers.\n2. Accurately predicting the future behavior of customers (e.g., transaction prediction) using predictive customer behavior modeling techniques — instead of just looking in the rear-view mirror of historical data.\n3. Using advanced calculations to determine the customer lifetime value (LTV) of every customer and basing decisions on it — instead of looking only at the short-term revenue that a customer may bring the organization.\n4. Knowing, based on objective metrics, exactly what marketing actions to do now, for each customer, in order to maximize the long-term value of every customer.\n5. Using marketing machine learning technology that will reveal insights and make recommendations for improving customer marketing that human marketers are unlikely to spot on their own.\nExploratory Data Analysis\nExploratory data analysis mainly includes missing value analysis, outlier analysis, correlation analysis, descriptive analysis and visualizations to gain insights from data.\nFirst Let’s check the amount of minority and majority class in the training data.\ntypically imbalanced data\nMinority class is almost 10% of target variable in train data.\nDealing with Imbalanced data set\nBefore modelling for this data set let us understand how to deal with imbalanced data set for classification problem. Traditional Machine Learning algorithms tend to produce unsatisfactory classifiers when faced with imbalanced data sets. For any imbalanced data set, if the event to be predicted belongs to the minority class and the event rate is less than 10%, it is usually referred to as a rare event. The conventional model evaluation methods do not accurately measure model performance when faced with imbalanced data sets. Standard classifier algorithms like Decision Tree and Logistic Regression have a bias towards classes which have large number of instances. They tend to only predict the majority class data. The features of the minority class are treated as noise and are often ignored. Thus, there is a high probability of mis-classification of the minority class as compared to the majority class. Performance of classification algorithm is measured by the Confusion Matrix which contains information about the actual and the predicted class. Thus we need to deal with this imbalanced data set.\nHere are some methods to deal with imbalanced data for classification.\nThere is no missing values in both train and test data.\nLet us check the distribution of first 20 numerical features in train data by plotting histograms of each variable. (For distribution of complete features go here.)\ndistribution of first 20 variables in train data.\nLooking at the shapes of histograms we can easily conclude that almost all numeric variables follow normal distribution.\nI have decided to see if there are any outliers in the data set according to Chauvenet’s criterion. After removing outliers (0.87% of total observations) we have 1,98,264 observations in train data and 1,98,250 observations in test data.\nNow let’s check the distribution of first 20 variables in train data with both of the target classes. (For checking distribution of all variables go here.)\ndistribution of first 20 variables each class in training data.\nFrom the above plots we can see that some variables show different distributions for different target classes. But using tree based algorithms can deal with these different distributions in target class because recovering 0 and 1 is exactly what a tree based classification model does. For each observation, a model can assign the probability that that observation belongs to 0 and the probability that that value belongs to 1.\nDistribution of first 20 numeric variables in the training and test data. (For complete distribution go here.)\ndistribution of first 20 variables in train and test data.\nThe train and test seems to be well balanced with respect to distribution of the numeric variables.\nVisualizing class wise descriptive statistics such as mean ,median, standard deviation, minimum, maximum, kurtosis and skewness of train data I plotted the following graphs. Kurtosis and skewness give information about the shape of distribution of data. (To know significance of these shape variables go here.)\nClass wise distribution of mean in training data\n\nClass wise distribution of median in training data\n\nClass wise distribution of standard deviation in training data\n\nClass wise distribution of skewness in training data\n\nClass wise distribution of kurtosis in training data\n\nClass wise distribution of minimum in training data\n\nClass wise distribution of maximum in training data\n\nVisualizing descriptive statistics such as mean ,median, standard deviation, minimum, maximum, kurtosis and skewness of both the training and test data, I plotted the following graphs.\nDistribution of mean in training and test data\n\nDistribution of median in training and test data\n\nDistribution of standard deviation in training and test data\n\nDistribution of skewness in training and test data\n\nDistribution of kurtosis in training and test data\n\nDistribution of minimum in training and test data\n\nDistribution of maximum in training and test data\n\nWe can make a few observations here:\nStandard deviation is relatively large for both training and test variable data. However, the min, max, mean, median, standard deviation values for training and test data looks quite close. Mean values are distributed over a large range. Moreover, mean and median have similar distribution. Both training and test data is Leptokurtic and negatively skewed.\nNow checking correlation among numerical variables, minimum and maximum correlation among numerical variables in train data are -0.009839 and 0.009676 respectively. This shows that the correlations between the numerical data are close to zero. That means that most of the numerical data are almost uncorrelated between them.\nAt this point I will go for Principal component analysis (PCA) to check whether all 200 variables are useful or we can reduce features at this point of time. For this I will plot the experienced variance obtained from PCA. If it forms a straight line with slope 1 then we can conclude that the data set have already gone with PCA. (Know more about PCA here.)\nExplained variance plot corresponding to different numbers of numeric variables.\nThus we have to go with all 200 features.\nFeature Engineering\nAdd row wise descriptive statistics i.e. mean, median, standard deviation, minimum, maximum, kurtosis, skewness and sum as separate features in training data set. I created 200 new features based on the original 200 features where the new values for these new features would be the number of unique occurrences (frequency) of the value in each cell of a particular variable. Often there can be relevant information in the frequency, depending on how the categories are drawn. But we have to be cautious while adding features. We should check duplicate observations in both train and test data. There are 1,00,000 observations found which are duplicate in test data.\nNow I have 410 variables in the training data set and 409 in the test data set.\nBefore going for modelling let’s have some stuff about the classification evaluation metric AUC-ROC Score (good understanding of confusion matrix is required.). It is one of the most important evaluation metrics for checking any classification’s performance. It is also written as AUC-ROC (Area Under the Receiver Operating Characteristics). AUC-ROC curve is a performance measurement for classification problem at various thresholds settings. ROC is a probability curve and AUC represents degree or measure of separability. It tells how much model is capable of distinguishing between classes. Higher the AUC, the better the model is at predicting 0 as 0 and 1 as 1. The ROC curve is plotted with True Positive Rate (TPR) against the False Positive Rate (FPR) where TPR is on y-axis and FPR is on the x-axis.\nRepresentation of ROC.\nWhy to use Light GBM?\nAs we I discussed earlier in this article, our data set is imbalanced and thus we should not use traditional models like logistic regression. Idea about Naive Bayes is good but we should assure independence of predictor variables as we have almost uncorrelated predictor variables but that do not assure about independence between them.\nLight GBM builds trees one at a time, where each new tree helps to correct errors made by previously trained tree. It performs the optimization in function space (rather than in parameter space) which makes the use of custom loss functions much easier. It is also faster in speed and accuracy as compared to bagging and adaptive boosting. It is capable of performing equally good with large data sets with a significant reduction in training time as compared to XGBOOST. But along with these advantages there is most disadvantageous feature of LGBM i.e. parameter tuning in LightGBM. It should be done carefully. (Know more about Light GBM parameters.)\nModelling\nAfter modelling with LightGBM with standard parameters, the AUC Score was 0.88576. After adding features and modelling with same standard parameters before modelling then I got AUC Score 0.89968. After tuning parameters and using K fold Stratified cross validation with k=10 I got AUC Score 9.0600.\nROC with scaled threshold values\nFinally, calculating other metrics of binary classification.\nAccuracy Score for LightGBM is  0.86031\nPrecision Score for  LightGBM is  0.777291272763459\nRecall Score for LightGBM is  0.39970320335687237\nf1 Score for LightGBM is  0.527930789767159\nFurther Improvements can be done by-\nUsing Parallel Processing with LightGBM Algorithm.\nTaking a try for XGBoost for faster speeds.\nFor expert view on this problem go here.\nEnd Notes\nThis was a binary classification problem on a typically unbalanced data set with no missing values. Predictor variables are anonymous and numeric and target variable is categorical. Visualizing descriptive features and finally I got to know that these variables are not correlated among themselves. After that I decided to treat imbalanced data set. Modelling with LightGBM, using the standard model parameters with feature engineered data I got AUC-Score of 0.899 and after tuning parameters with K fold stratified sampling final value of AUC Score is 0.90600.\nReferences\nI have taken references for this article from https://www.kaggle.com/cdeotte/200-magical-models-santander-0-920/notebook and other links mentioned in this article. I am sure these techniques will be useful and you will get something from this article. Till then Happy Analyzing! 😎.\n\nCustomer Transaction Prediction using LightGBM was originally published in Analytics Vidhya on Medium, where people are continuing the conversation by highlighting and responding to this story.",
      "dc:creator": "Kushagra Raj Tiwari",
      "guid": "https://medium.com/p/3191c6c634dc",
      "categories": [
        "data-science",
        "machine-learning",
        "binary-classification",
        "lightgbm",
        "imbalanced-dataset"
      ],
      "isoDate": "2019-07-02T05:23:22.000Z"
    }
  ],
  "feedUrl": "https://medium.com/@KushagraRajTiwari/feed",
  "image": {
    "link": "https://medium.com/@KushagraRajTiwari?source=rss-da71bf5101aa------2",
    "url": "https://cdn-images-1.medium.com/fit/c/150/150/1*FIlhKrFiHUbCCJE-mnq4nw.png",
    "title": "Stories by Kushagra Raj Tiwari on Medium"
  },
  "paginationLinks": {
    "self": "https://medium.com/@KushagraRajTiwari/feed"
  },
  "title": "Stories by Kushagra Raj Tiwari on Medium",
  "description": "Stories by Kushagra Raj Tiwari on Medium",
  "webMaster": "yourfriends@medium.com",
  "generator": "Medium",
  "link": "https://medium.com/@KushagraRajTiwari?source=rss-da71bf5101aa------2",
  "lastBuildDate": "Sun, 29 Sep 2024 11:03:22 GMT"
}